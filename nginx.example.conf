# vim: ts=5 sw=4 sts=4 sr noet
user www-data;
worker_processes  1;


error_log  logs/error.log;
error_log  logs/error.log  notice;
error_log  logs/error.log  info;

pid logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    # gzip  on;
 
    # ssl settings 
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
    ssl_prefer_server_ciphers on;

    server {
	   root /var/www/html;

	   index index.html index.htm index.nginx-debian.html;

	   #server_name YOUR_DOMAIN;

	   listen [::]:443 ssl ipv6only=on; # managed by Certbot
	   listen 443 ssl; # managed by Certbot

	   # these are so nginx doesn't complain about you not setting the cert and private key
	   # not for the actual handshake
	   ssl_certificate /path/to/certs/fallback_chain.pem
	   ssl_certificate_key /path/to/certs/fallback_private_key.pem

	   # if using certbot you may want these lines
	   #include /path/to/letsencrypt/options-ssl-nginx.conf;
	   #ssl_dhparam /path/to/letsencrypt/ssl-dhparams.pem;

	   # use lua to make the tls handshake!
	   ssl_certificate_by_lua_block {
		  local ssl = require "ngx.ssl"

		  -- this block will run before the tls handshake
		  -- so we need to use sni to see the server name
		  local server_name, err = ssl.server_name()
		  -- optional logging
		  -- print("server name = "..server_name)

		  -- function used to read cert and private key
		  function read_file(file)
			 local f = assert(io.open(file, "rb"))
			 local content = f:read("*all")
			 f:close()
			 return content
		  end

		  -- clear out those fallback certs
		  local ok, err = ssl.clear_certs()
		  if not ok then
			 ngx.log(ngx.ERR, "failed to clear fallback")
			 return ngx.exit(ngx.ERROR)
		  end

		  local pem_cert_chain = assert(read_file(
			 "/path/to/"..server_name.."/fullchain.pem"
		  ))

		  local der_cert_chain, err = ssl.cert_pem_to_der(
			 pem_cert_chain
		  )
		  if not der_cert_chain then
			 ngx.log(ngx.ERR, "failed to convert certificate chain ",
					   "from PEM to DER: ", err)
			 return ngx.exit(ngx.ERROR)
		  end

		  local ok, err = ssl.set_der_cert(der_cert_chain)
		  if not ok then
			 ngx.log(ngx.ERR, "failed to set DER cert: ", err)
			 return ngx.exit(ngx.ERROR)
		  end

		  local pem_key = assert(read_file(
			 "/path/to/"..server_name.."/privkey.pem"
		  ))

		  local der_private_key, err = ssl.priv_key_pem_to_der(
			 pem_key
		  )
		  if not der_private_key then
			 ngx.log(ngx.ERR, "failed to convert private key ", 
					   "from PEM to DER: ", err)
			 return ngx.exit(ngx.ERROR)
		  end

		  local ok, err = ssl.set_der_priv_key(der_private_key)
		  if not ok then
			 ngx.log(ngx.ERR, "failed to set DER private key: ", err)
			 return ngx.exit(ngx.ERROR)
		  end 
	   }

	   # now we have the tls handshake so do a handoff to apache
	   #ty https://serverfault.com/questions/145383/proxy-https-requests-to-a-http-backend-with-nginx
	   location / {
		  # i have apache listening on :8080
		  # feel free to modify these
		  proxy_pass            http://127.0.0.1:8080;
		  proxy_read_timeout    90;
		  proxy_connect_timeout 90;
		  proxy_redirect        off;

		  proxy_set_header      Host $host;
		  proxy_set_header      X-Real-IP $remote_addr;
		  proxy_set_header      X-Forwarded-For $proxy_add_x_forwarded_for;
		  proxy_set_header      X-Forwarded-Proto https;
		  proxy_set_header      X-Forwarded-Port 443;
	   }
    }

    # used certbot for this
    # redirect http traffic over
    # tls
    server {
	   if ($host = YOUR_DOMAIN) {
		  return 301 https://$host$request_uri;
	   }

	   listen 80 default_server;
	   listen [::]:80 default_server;

	   server_name YOUR_DOMAIN;
	   return 404;
    }
}
